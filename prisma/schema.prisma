generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "postgresqlExtensions", "relationJoins", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid()) @db.VarChar(30)
  username     String   @unique @db.VarChar(100)
  email        String   @unique @db.VarChar(100)
  password     String   @db.Text
  role         Role     @default(USER)
  profileImage String   @default("") @map("profile_image") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  userProfile UserProfile?
  userCar     UserCar[]
  order       Order[]
  transaction Transaction[]
  eTicket     ETicket[]

  @@map("users")
}

model UserProfile {
  id          String   @id @default(cuid()) @db.VarChar(30)
  userId      String   @unique @map("user_id") @db.VarChar(30)
  fullname    String?  @db.VarChar(255)
  phoneNumber String?  @map("phone_number") @db.VarChar(20)
  address     String?  @db.Text
  latitude    Decimal? @db.Decimal(10, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model CarBrand {
  id        String   @id @default(cuid()) @db.VarChar(30)
  name      String   @unique @db.VarChar(50)
  logo      String   @db.Text
  country   String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  carModel CarModel[]

  @@map("car_brands")
}

model CarModel {
  id         String   @id @default(cuid()) @db.VarChar(30)
  carBrandId String   @map("car_brand_id") @db.VarChar(30)
  name       String   @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  carBrand     CarBrand       @relation(fields: [carBrandId], references: [id], onDelete: Cascade)
  carModelYear CarModelYear[]

  @@unique([name, carBrandId])
  @@map("car_models")
}

model CarModelYear {
  id         String   @id @default(cuid()) @db.VarChar(30)
  carModelId String   @map("car_model_id") @db.VarChar(30)
  year       Int      @db.Integer
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  carModel          CarModel            @relation(fields: [carModelId], references: [id], onDelete: Cascade)
  carModelYearColor CarModelYearColor[]

  @@unique([year, carModelId])
  @@map("car_model_years")
}

model Color {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  carModelYearColor CarModelYearColor[]

  @@map("colors")
}

model CarModelYearColor {
  id             String   @id @default(cuid())
  carModelYearId String   @map("car_model_year_id") @db.VarChar(30)
  colorId        String   @map("color_id") @db.VarChar(30)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  carModelYear CarModelYear @relation(fields: [carModelYearId], references: [id], onDelete: Cascade)
  color        Color        @relation(fields: [colorId], references: [id], onDelete: Cascade)
  userCars     UserCar[]

  @@unique([carModelYearId, colorId])
  @@map("car_model_year_colors")
}

model UserCar {
  id                  String   @id @default(cuid()) @db.VarChar(30)
  userId              String   @map("user_id") @db.VarChar(30)
  carModelYearColorId String   @map("car_model_year_color_id") @db.VarChar(30)
  licensePlate        String   @map("license_plate") @db.VarChar(50)
  carImages           String[] @map("car_images")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  carModelYearColor CarModelYearColor @relation(fields: [carModelYearColorId], references: [id], onDelete: Cascade)
  order             Order[]

  @@map("user_cars")
}

model Workshop {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @unique @db.VarChar(100)
  email       String   @db.VarChar(100)
  phoneNumber String?  @map("phone_number") @db.VarChar(15)
  address     String   @db.Text
  latitude    Decimal  @db.Decimal(9, 6)
  longitude   Decimal  @db.Decimal(9, 6)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  order Order[]

  @@map("workshops")
}

model CarService {
  id        String   @id @default(cuid()) @db.VarChar(30)
  name      String   @unique @db.VarChar(50)
  price     Decimal  @map("price") @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders Order[]

  @@map("car_services")
}

model PaymentMethod {
  id                    String            @id @default(cuid()) @db.VarChar(30)
  name                  String            @unique @db.VarChar(100)
  xenditPaymentMethodId String?           @map("xendit_payment_method_id") @db.VarChar(100)
  type                  PaymentMethodType @default(EWALLET) @map("type")
  fee                   Decimal           @db.Decimal(10, 2)
  description           String?           @db.Text
  logoUrl               String?           @map("logo_url") @db.Text
  isActive              Boolean           @default(true) @map("is_active")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  transaction Transaction[]

  @@map("payment_methods")
}

model Order {
  id            String      @id @default(cuid()) @db.VarChar(30)
  userId        String      @map("user_id") @db.VarChar(30)
  userCarId     String      @map("user_car_id") @db.VarChar(30)
  workshopId    String      @map("workshop_id") @db.VarChar(30)
  transactionId String      @map("transaction_id") @db.VarChar(30)
  workStatus    WorkStatus  @default(QUEUED) @map("work_status")
  orderStatus   OrderStatus @default(DRAFT) @map("order_status")
  note          String      @db.Text
  subtotalPrice Decimal     @map("subtotal_price") @db.Decimal(10, 2)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userCar     UserCar      @relation(fields: [userCarId], references: [id], onDelete: Cascade)
  workshop    Workshop     @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  transaction Transaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  carServices CarService[]
  eTicket     ETicket[]

  @@map("orders")
}

model Transaction {
  id                String        @id @default(cuid()) @db.VarChar(30)
  userId            String        @map("user_id") @db.VarChar(30)
  paymentMethodId   String        @map("payment_method_id") @db.VarChar(30)
  invoiceId         String?       @map("invoice_id") @db.VarChar(30)
  adminFee          Decimal       @map("admin_fee") @db.Decimal(10, 2)
  paymentMethodFee  Decimal       @map("payment_method_fee") @db.Decimal(10, 2)
  totalPrice        Decimal       @map("total_price") @db.Decimal(10, 2)
  refundAmount      Decimal?      @map("refund_amount") @db.Decimal(10, 2)
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  paymentInvoiceUrl String        @db.Text
  refundedAt        DateTime?
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  order         Order[]

  @@map("transactions")
}

model ETicket {
  id           String   @id @default(cuid()) @db.VarChar(30)
  userId       String   @map("user_id") @db.VarChar(30)
  orderId      String   @map("order_id") @db.VarChar(30)
  ticketNumber Int      @map("ticket_number")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("e_tickets")
}

enum WorkStatus {
  QUEUED
  INSPECTION
  PUTTY
  SURFACER
  APPLICATION_COLOR_BASE
  APPLICATION_CLEAR_COAT
  POLISHING
  FINAL_QC
  COMPLETED
  CANCELLED
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  EXPIRED
  FAILED
  REFUNDED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PaymentMethodType {
  EWALLET
  BANK_TRANSFER
  CREDIT_CARD
  RETAIL_OUTLET
  QRIS
}
