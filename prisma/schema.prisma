generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "postgresqlExtensions", "relationJoins", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid()) @db.VarChar(30)
  username     String   @unique @db.VarChar(100)
  email        String   @unique @db.VarChar(100)
  password     String   @db.Text
  role         Role     @default(USER)
  profileImage String   @default("") @map("profile_image") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  userProfile   UserProfile?
  orders        Order[]
  transactions  Transaction[]
  eTickets      ETicket[]
  cancellations Cancellation[]
  refunds       Refund[]
  workshops     Workshop[]

  @@map("users")
}

model UserProfile {
  id          String   @id @default(cuid()) @db.VarChar(30)
  userId      String   @unique @map("user_id") @db.VarChar(30)
  fullname    String?  @db.VarChar(255)
  phoneNumber String?  @map("phone_number") @db.VarChar(20)
  address     String?  @db.Text
  latitude    Decimal? @db.Decimal(12, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model CarBrand {
  id        String   @id @default(cuid()) @db.VarChar(30)
  name      String   @unique @db.VarChar(50)
  logo      String   @db.Text
  country   String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  carModels CarModel[]

  @@map("car_brands")
}

model CarModel {
  id         String   @id @default(cuid()) @db.VarChar(30)
  carBrandId String   @map("car_brand_id") @db.VarChar(30)
  name       String   @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  carBrand CarBrand        @relation(fields: [carBrandId], references: [id], onDelete: Cascade)
  colors   CarModelColor[]

  @@unique([name, carBrandId])
  @@map("car_models")
}

model Color {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  carModels CarModelColor[]

  @@map("colors")
}

model CarModelColor {
  id         String   @id @default(cuid()) @db.VarChar(30)
  carModelId String   @map("car_model_id") @db.VarChar(30)
  colorId    String   @map("color_id") @db.VarChar(30)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  carModel CarModel @relation(fields: [carModelId], references: [id], onDelete: Cascade)
  color    Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  Order    Order[]

  @@unique([carModelId, colorId])
  @@map("car_model_colors")
}

model Workshop {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @unique @db.VarChar(100)
  email       String   @db.VarChar(100)
  phoneNumber String?  @map("phone_number") @db.VarChar(15)
  address     String   @db.Text
  latitude    Decimal  @db.Decimal(9, 6)
  longitude   Decimal  @db.Decimal(9, 6)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  orders Order[]
  users  User[]

  @@map("workshops")
}

model CarService {
  id              String   @id @default(cuid()) @db.VarChar(30)
  name            String   @unique @db.VarChar(50)
  price           Decimal  @map("price") @db.Decimal(12, 2)
  carServiceImage String   @default("https://i.pinimg.com/236x/63/8e/f4/638ef4c3ecca794233a86607b65326a7.jpg") @map("car_service_image")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  orders Order[]

  @@map("car_services")
}

model PaymentMethod {
  id                 String             @id @default(cuid()) @db.VarChar(30)
  name               String             @unique @db.VarChar(100)
  type               PaymentMethodType  @default(EWALLET) @map("type")
  reusability        PaymentReusability @default(ONE_TIME_USE) @map("reusability")
  fee                Decimal            @db.Decimal(12, 2)
  minimumPayment     Decimal            @default(0) @map("minimum_payment") @db.Decimal(12, 2)
  maximumPayment     Decimal            @default(100000000) @map("maximum_payment") @db.Decimal(12, 2)
  description        String?            @db.Text
  logoUrl            String?            @map("logo_url") @db.Text
  isActive           Boolean            @default(true) @map("is_active")
  midtransIdentifier String?            @map("midtrans_identifier") @db.VarChar(50) // Tetap String untuk fleksibilitas kode Midtrans
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")

  transactions         Transaction[]
  eWalletPaymentConfig EWalletPaymentConfig?
  virtualAccountConfig VirtualAccountConfig?

  @@map("payment_methods")
}

model EWalletPaymentConfig {
  id               String   @id @default(cuid()) @db.VarChar(30)
  paymentMethodId  String   @unique @map("payment_method_id") @db.VarChar(30)
  channelCode      String   @map("channel_code") @db.VarChar(50) // Mungkin spesifik Xendit? Biarkan dulu
  successReturnUrl String?  @map("success_return_url") @db.Text
  failureReturnUrl String?  @map("failure_return_url") @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@map("ewallet_payment_configs")
}

model VirtualAccountConfig {
  id              String   @id @default(cuid()) @db.VarChar(30)
  paymentMethodId String   @unique @map("payment_method_id") @db.VarChar(30)
  bankCode        String   @map("bank_code") @db.VarChar(50) // Mungkin spesifik Xendit? Biarkan dulu
  bankName        String   @map("bank_name") @db.VarChar(100) // Nama bank internalmu
  accountPattern  String?  @map("account_pattern") @db.VarChar(50)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@map("virtual_account_configs")
}

model Order {
  id              String      @id @default(cuid()) @db.VarChar(30)
  userId          String      @map("user_id") @db.VarChar(30)
  carModelColorId String      @map("car_model_color_id") @db.VarChar(30)
  workshopId      String      @map("workshop_id") @db.VarChar(30)
  transactionId   String      @map("transaction_id") @db.VarChar(30)
  workStatus      WorkStatus  @default(QUEUED) @map("work_status")
  orderStatus     OrderStatus @default(DRAFT) @map("order_status")
  plateNumber     String?     @map("plate_number")
  note            String?     @db.Text
  subtotalPrice   Decimal     @map("subtotal_price") @db.Decimal(12, 2)
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  carModelColor CarModelColor @relation(fields: [carModelColorId], references: [id]) // <<< DAN DI SINI
  workshop      Workshop      @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  transaction   Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  carServices   CarService[]
  eTickets      ETicket[]

  @@map("orders")
}

model Transaction {
  id              String        @id @default(cuid()) @db.VarChar(30)
  userId          String        @map("user_id") @db.VarChar(30)
  paymentMethodId String        @map("payment_method_id") @db.VarChar(30)
  adminFee        Decimal       @map("admin_fee") @db.Decimal(12, 2)
  totalPrice      Decimal       @map("total_price") @db.Decimal(12, 2)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod  @relation(fields: [paymentMethodId], references: [id]) // onDelete Cascade biasanya tidak di PaymentMethod
  order         Order[]
  paymentDetail PaymentDetail?
  cancellation  Cancellation?
  refund        Refund?

  @@map("transactions")
}

model PaymentDetail {
  id                   String    @id @default(cuid()) @db.VarChar(30)
  transactionId        String    @unique @map("transaction_id") @db.VarChar(30) // Relasi one-to-one ke Transaction
  virtualAccountNumber String?   @map("virtual_account_number") @db.Text
  invoiceUrl           String?   @map("invoice_url") @db.Text
  mobileUrl            String?   @map("mobile_url") @db.Text
  webUrl               String?   @map("web_url") @db.Text
  deeplinkUrl          String?   @map("deeplink_url") @db.Text
  paidAt               DateTime? @map("paid_at")

  // Field Xendit (Tetap Ada)
  xenditInvoiceId        String? @map("xendit_invoice_id")
  xenditPaymentRequestId String? @map("xendit_payment_request_id")
  xenditPaymentMethodId  String? @map("xendit_payment_method_id")

  // Field Midtrans (Nullable)
  midtransTransactionId     String?                    @map("midtrans_transaction_id") @db.VarChar(100)
  midtransOrderId           String?                    @map("midtrans_order_id") @db.VarChar(100)
  midtransPaymentType       String?                    @map("midtrans_payment_type") @db.VarChar(50) // Tetap String untuk fleksibilitas tipe Midtrans
  midtransTransactionStatus MidtransTransactionStatus? @map("midtrans_transaction_status") // <<< Jadi Enum
  midtransFraudStatus       MidtransFraudStatus?       @map("midtrans_fraud_status") // <<< Jadi Enum
  midtransPaymentCode       String?                    @map("midtrans_payment_code") @db.VarChar(50)
  midtransBillKey           String?                    @map("midtrans_bill_key") @db.VarChar(50)
  midtransBillerCode        String?                    @map("midtrans_biller_code") @db.VarChar(50)
  midtransQrCodeUrl         String?                    @map("midtrans_qr_code_url") @db.Text
  midtransRedirectUrl       String?                    @map("midtrans_redirect_url") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("payment_details")
}

model Cancellation {
  id            String             @id @default(cuid()) @db.VarChar(30)
  transactionId String             @unique @map("transaction_id") @db.VarChar(30) // Relasi one-to-one ke Transaction
  reason        CancellationReason
  notes         String?            @db.Text
  cancelledById String             @map("cancelled_by_id") @db.VarChar(30)
  cancelledAt   DateTime           @default(now()) @map("cancelled_at")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  cancelledBy User        @relation(fields: [cancelledById], references: [id], onDelete: Restrict)

  @@map("cancellations")
}

model Refund {
  id            String   @id @default(cuid()) @db.VarChar(30)
  transactionId String   @unique @map("transaction_id") @db.VarChar(30) // Relasi one-to-one ke Transaction
  amount        Decimal  @db.Decimal(12, 2)
  reason        String   @db.Text
  refundedById  String   @map("refunded_by_id") @db.VarChar(30)
  refundedAt    DateTime @default(now()) @map("refunded_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  refundedBy  User        @relation(fields: [refundedById], references: [id], onDelete: Restrict)

  @@map("refunds")
}

model ETicket {
  id           String   @id @default(cuid()) @db.VarChar(30)
  userId       String   @map("user_id") @db.VarChar(30)
  orderId      String   @map("order_id") @db.VarChar(30)
  // Todo: Nanti jadiin unique tapi bakal kehapus semuanya
  ticketNumber Int      @map("ticket_number")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("e_tickets")
}

enum WorkStatus {
  QUEUED
  INSPECTION
  PUTTY
  SURFACER
  APPLICATION_COLOR_BASE
  APPLICATION_CLEAR_COAT
  POLISHING
  FINAL_QC
  COMPLETED
  CANCELLED
}

enum OrderStatus {
  DRAFT // Order dibuat tapi belum dikonfirmasi/dibayar
  CONFIRMED // Order dikonfirmasi (mungkin setelah pembayaran)
  PROCESSING // Order sedang dikerjakan
  COMPLETED // Order selesai
  CANCELLED // Order dibatalkan
}

enum PaymentStatus {
  PENDING // Menunggu pembayaran
  SUCCESS // Pembayaran berhasil
  EXPIRED // Waktu pembayaran habis
  FAILED // Pembayaran gagal (ditolak, error)
  REFUNDED // Pembayaran sudah dikembalikan
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PaymentMethodType {
  CARD
  DIRECT_DEBIT
  EWALLET
  OVER_THE_COUNTER // Alfamart, Indomaret
  QR_CODE // QRIS
  VIRTUAL_ACCOUNT
  UNKNOWN_ENUM_VALUE // Untuk fallback jika ada tipe baru yg belum dipetakan
}

enum PaymentReusability {
  ONE_TIME_USE
  MULTIPLE_USE
}

enum CancellationReason {
  CUSTOMER_REQUEST
  WORKSHOP_UNAVAILABLE
  SERVICE_UNAVAILABLE
  SCHEDULING_CONFLICT
  PAYMENT_ISSUE
  VEHICLE_ISSUE
  PRICE_DISAGREEMENT
  WORKSHOP_OVERBOOKED
  DUPLICATE_ORDER
  PARTS_UNAVAILABLE
  CUSTOMER_NO_SHOW
  FORCE_MAJEURE
  SERVICE_INCOMPATIBILITY
  OTHER
}

// * ENUM BARU untuk Midtrans
enum MidtransTransactionStatus {
  PENDING // Menunggu pembayaran
  SETTLEMENT // Pembayaran berhasil diterima
  CAPTURE // Dana berhasil ditangkap (untuk Kartu Kredit Auth-Capture)
  EXPIRE // Transaksi kadaluarsa
  DENY // Transaksi ditolak (oleh Bank, sistem Fraud, dll)
  CANCEL // Transaksi dibatalkan
  FAILURE // Transaksi gagal karena error teknis
  AUTHORIZE // Transaksi diotorisasi (Kartu Kredit, menunggu capture)
  // Tambahkan nilai lain jika diperlukan di masa mendatang
}

enum MidtransFraudStatus {
  ACCEPT // Dianggap aman
  CHALLENGE // Mencurigakan, butuh review
  DENY // Dianggap fraud, ditolak
}
